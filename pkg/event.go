package pkg

import (
	"fmt"
	"time"

	"github.com/minio/minio-go/v7/pkg/notification"
)

// BucketEventType defines general events that have been consolidated
// from the more specific S3 bucket events
type BucketEventType string

const (
	BucketEventOther  BucketEventType = "Other"
	BucketEventRead                   = "Read"
	BucketEventWrite                  = "Write"
	BucketEventDelete                 = "Delete"
	BucketEventStat                   = "Stat"
)

// BucketEvent is an event generated by the Minio bucket notification.
// Only a subset of interesting fields are capture from the larger event payload.
type BucketEvent struct {
	EventName notification.EventType `json:"EventName"`
	Key       string                 `json:"Key"`
	Records   []record               `json:"Records"`
}

type record struct {
	EventTime time.Time `json:"eventTime"`
	S3        struct {
		Bucket struct {
			Name string `json:"name"`
		} `json:"bucket"`
		Object struct {
			Key  string `json:"key"`
			Size int    `json:"size,omitempty"`
		} `json:"object"`
	} `json:"s3"`
}

func newBucketEvent(s3Event notification.EventType, bucket, key string) *BucketEvent {
	evt := &BucketEvent{
		EventName: s3Event,
		Key:       fmt.Sprintf("%s/%s", bucket, key),
	}
	var rec record
	rec.EventTime = time.Now()
	rec.S3.Bucket.Name = bucket
	rec.S3.Object.Key = key
	evt.Records = append(evt.Records, rec)
	return evt
}

// Type returns the type of the BucketEvent, if it is considered an interesting type.
// All other types are returned as BucketEventOther
func (e *BucketEvent) Type() BucketEventType {
	switch e.EventName {
	case notification.ObjectAccessedGet:
		return BucketEventRead
	case notification.ObjectCreatedCopy, notification.ObjectCreatedPut, notification.ObjectCreatedPost:
		return BucketEventWrite
	case notification.ObjectRemovedDelete:
		return BucketEventDelete
	case notification.ObjectAccessedHead:
		return BucketEventStat
	default:
		return BucketEventOther
	}
}

// Check the event for validity
func (e *BucketEvent) Check() error {
	if len(e.Records) == 0 {
		return fmt.Errorf("no records found for bucket event: %+v", e)
	}
	for i, rec := range e.Records {
		if rec.S3.Bucket.Name == "" {
			return fmt.Errorf("record %d has no bucket name", i)
		}
		if rec.S3.Object.Key == "" {
			return fmt.Errorf("record %d has no object key", i)
		}
		if rec.EventTime.IsZero() {
			return fmt.Errorf("record %d has no event time", i)
		}
	}
	return nil
}

// SetEventTime sets the EventTime field for each Record in the event
func (e *BucketEvent) SetEventTime(t time.Time) {
	for i := range e.Records {
		(&e.Records[i]).EventTime = t
	}
}
